include(CMakeParseArguments)

# Construct the URL micromamba binary
function(mamba_get_filename FILENAME)
  if(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Darwin")
    if(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "arm")
      set(MICROMAMBA_FILENAME "micromamba-osx-arm64")
    else()
      set(MICROMAMBA_FILENAME "micromamba-osx-64")
    endif()
  elseif(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Windows")
    set(MICROMAMBA_FILENAME "micromamba-win-64")
  elseif(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Linux")
    if(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "aarch64")
      set(MICROMAMBA_FILENAME "micromamba-linux-aarch64")
    elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "ppc64le")
      set(MICROMAMBA_FILENAME "micromamba-linux-ppc64le")
    elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "64")
      set(MICROMAMBA_FILENAME "micromamba-linux-64")
    endif()
  else()
    message(FATAL_ERROR "Micromamba is not available for your system \"${CMAKE_HOST_SYSTEM_NAME}\"")
  endif()
  set(MICROMAMBA_FILENAME "${MICROMAMBA_FILENAME}" PARENT_SCOPE)
endfunction()

# Download the micromamba binary
function(download_micromamba)
  cmake_parse_arguments(MICROMAMBA "SHOW_PROGRESS" "DESTINATION;VERSION;TIMEOUT;INACTIVITY_TIMEOUT;TLS_VERIFY;TLS_CAINFO" "" "${ARGN}")

  mamba_get_filename(MICROMAMBA_FILENAME VERSION "${MICROMAMBA_VERSION}")

  set(ARCHIVE_URL "https://github.com/mamba-org/micromamba-releases/releases/download/${MICROMAMBA_VERSION}/${MICROMAMBA_FILENAME}.tar.bz2")
  set(SHA256_URL "https://github.com/mamba-org/micromamba-releases/releases/download/${MICROMAMBA_VERSION}/${MICROMAMBA_FILENAME}.tar.bz2.sha256")

  if(MICROMAMBA_SHOW_PROGRESS)
    list(APPEND EXTRA_ARGUMENTS "SHOW_PROGRESS")
  endif()
  if(DEFINED MICROMAMBA_TIMEOUT)
    list(APPEND EXTRA_ARGUMENTS "TIMEOUT" "${MICROMAMBA_TIMEOUT}")
  endif()
  if(DEFINED MICROMAMBA_INACTIVITY_TIMEOUT)
    list(APPEND EXTRA_ARGUMENTS "INACTIVITY_TIMEOUT" "${MICROMAMBA_INACTIVITY_TIMEOUT}")
  endif()
  if(DEFINED MICROMAMBA_TLS_VERIFY)
    list(APPEND EXTRA_ARGUMENTS "TLS_VERIFY" "${MICROMAMBA_TLS_VERIFY}")
  endif()
  if(DEFINED MICROMAMBA_TLS_CAINFO)
    list(APPEND EXTRA_ARGUMENTS "TLS_CAINFO" "${MICROMAMBA_TLS_CAINFO}")
  endif()

  if(DEFINED EXTRA_ARGUMENTS)
    list(APPEND SHA256_EXTRA_ARGUMENTS "${EXTRA_ARGUMENTS}")
  endif()
  list(APPEND SHA256_EXTRA_ARGUMENTS "LOG" "SHA256_LOG" "STATUS" "SHA256_STATUS")

  file(DOWNLOAD "${SHA256_URL}" "${MICROMAMBA_DESTINATION}/${MICROMAMBA_FILENAME}-v${MICROMAMBA_VERSION}.tar.bz2.sha256" ${SHA256_EXTRA_ARGUMENTS})
  list(GET SHA256_STATUS 0 SHA256_CODE)
  list(GET SHA256_STATUS 1 SHA256_MESSAGE)
  if(NOT "${SHA256_CODE}" STREQUAL "0")
    message(STATUS "[cmake-micromamba] Error downloading ${SHA256_URL} : ${SHA256_MESSAGE} (${SHA256_CODE}).")
  else()
    file(SHA256 "${MICROMAMBA_DESTINATION}/${MICROMAMBA_FILENAME}-v${MICROMAMBA_VERSION}.tar.bz2.sha256" SHA256_EMPTY)
    if("${SHA256_EMPTY}" STREQUAL "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
      file(REMOVE "${MICROMAMBA_DESTINATION}/${MICROMAMBA_FILENAME}-v${MICROMAMBA_VERSION}.tar.bz2.sha256")
      message(STATUS "[cmake-micromamba] Error downloading ${SHA256_URL} : Empty file.")
    else()
      file(READ "${MICROMAMBA_DESTINATION}/${MICROMAMBA_FILENAME}-v${MICROMAMBA_VERSION}.tar.bz2.sha256" MICROMAMBA_SHA256)
    endif()
  endif()

  if(DEFINED EXTRA_ARGUMENTS)
    list(APPEND ARCHIVE_EXTRA_ARGUMENTS "${EXTRA_ARGUMENTS}")
  endif()
  list(APPEND ARCHIVE_EXTRA_ARGUMENTS "LOG" "ARCHIVE_LOG" "STATUS" "ARCHIVE_STATUS")

  # Now download the archive
  file(DOWNLOAD "${ARCHIVE_URL}" "${MICROMAMBA_DESTINATION}/${MICROMAMBA_FILENAME}-v${MICROMAMBA_VERSION}.tar.bz2" ${ARCHIVE_EXTRA_ARGUMENTS})
  list(GET ARCHIVE_STATUS 0 ARCHIVE_CODE)
  list(GET ARCHIVE_STATUS 1 ARCHIVE_MESSAGE)
  if(NOT "${ARCHIVE_CODE}" STREQUAL "0")
    message(STATUS "[cmake-micromamba] Error downloading ${ARCHIVE_URL} : ${ARCHIVE_MESSAGE} (${ARCHIVE_CODE}).")
  else()
    file(SHA256 "${MICROMAMBA_DESTINATION}/${MICROMAMBA_FILENAME}-v${MICROMAMBA_VERSION}.tar.bz2" SHA256_EMPTY)
    if("${SHA256_EMPTY}" STREQUAL "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
      file(REMOVE "${MICROMAMBA_DESTINATION}/${MICROMAMBA_FILENAME}-v${MICROMAMBA_VERSION}.tar.bz2")
      message(STATUS "[cmake-micromamba] Error downloading ${ARCHIVE_URL} : Empty file.")
    else()
      execute_process(COMMAND "${CMAKE_COMMAND}" -E tar "xzf" "${MICROMAMBA_DESTINATION}/${MICROMAMBA_FILENAME}-v${MICROMAMBA_VERSION}.tar.bz2" WORKING_DIRECTORY "${MICROMAMBA_DESTINATION}")
      if(EXISTS "${MICROMAMBA_DESTINATION}/bin/micromamba")
        file(SHA256 "${MICROMAMBA_DESTINATION}/bin/micromamba" SHA256_TO_CHECK)
        if(NOT "${MICROMAMBA_SHA256}" STREQUAL "${SHA256_TO_CHECK}")
          file(REMOVE_RECURSE "${MICROMAMBA_DESTINATION}")
          message(FATAL_ERROR "SHA256 of ${MICROMAMBA_DESTINATION}/bin/micromamba isn't equal to ${MICROMAMBA_SHA256}")
        endif()
      elseif(EXISTS "${MICROMAMBA_DESTINATION}/Library/bin/micromamba.exe")
        file(SHA256 "${MICROMAMBA_DESTINATION}/Library/bin/micromamba.exe" SHA256_TO_CHECK)
        if(NOT "${MICROMAMBA_SHA256}" STREQUAL "${SHA256_TO_CHECK}")
          file(REMOVE_RECURSE "${MICROMAMBA_DESTINATION}")
          message(FATAL_ERROR "SHA256 of ${MICROMAMBA_DESTINATION}/Library/bin/micromamba.exe isn't equal to ${MICROMAMBA_SHA256}")
        endif()
      endif()
    endif()
  endif()
endfunction()

# Call the micromamba download
function(micromamba)
  cmake_parse_arguments(MICROMAMBA "SHOW_PROGRESS;STANDALONE;USE_LOCAL" "DESTINATION;VERSION" "" "${ARGN}")

  if(NOT DEFINED MICROMAMBA_VERSION)
    message(FATAL_ERROR "VERSION must be set for download_micromamba !")
  endif()

  if(NOT DEFINED MICROMAMBA_DESTINATION)
    list(APPEND ARGN "DESTINATION;${CMAKE_BINARY_DIR}/micromamba-v${MICROMAMBA_VERSION}")
  endif()

  if(MICROMAMBA_STANDALONE AND MICROMAMBA_USE_LOCAL)
    message(FATAL_ERROR "STANDALONE and USE_LOCAL are mutually exclusive !")
  endif()

  cmake_parse_arguments(MICROMAMBA "SHOW_PROGRESS" "DESTINATION;VERSION" "" "${ARGN}")

  string(FIND "${MICROMAMBA_VERSION}" "-" REPLACED_VERSION)
  if(NOT ${REPLACED_VERSION} STREQUAL "-1")
    string(SUBSTRING "${MICROMAMBA_VERSION}" 0 ${REPLACED_VERSION} REPLACED_VERSION)
  endif()
  if(MICROMAMBA_STANDALONE)
    download_micromamba("${ARGN}")
    set(Micromamba_ROOT "${MICROMAMBA_DESTINATION}")
    find_package(Micromamba ${REPLACED_VERSION} REQUIRED MODULE)
  elseif(MICROMAMBA_USE_LOCAL)
    find_package(Micromamba ${REPLACED_VERSION} REQUIRED)
  else()
    find_package(Micromamba ${REPLACED_VERSION} QUIET)
    if(NOT Micromamba_FOUND)
      message(STATUS "Installing micromamba version ${MICROMAMBA_VERSION} to ${MICROMAMBA_DESTINATION}")
      download_micromamba("${ARGN}")
      set(Micromamba_ROOT "${MICROMAMBA_DESTINATION}")
      find_package(Micromamba ${REPLACED_VERSION} REQUIRED MODULE)
    endif()
  endif()
endfunction()

# Setup micromamba environment
macro(micromamba_environment)
  message("Installing dependencies from channels :")

  cmake_parse_arguments(PARSED_ARGS "" "" "CHANNELS;DEPENDENCIES" ${ARGN})

  find_package(Micromamba QUIET)
  if(NOT Micromamba_FOUND)
    message(FATAL_ERROR "Could NOT find Micromamba v${MICROMAMBA_VERSION} ! Use micromamba function !")
  endif()

  set(CHANNEL_ARG "")
  foreach(Channel ${PARSED_ARGS_CHANNELS})
    list(APPEND CHANNEL_ARG "-c")
    list(APPEND CHANNEL_ARG ${Channel})
  endforeach()

  list(APPEND CMAKE_PREFIX_PATH "${CMAKE_BINARY_DIR}/environment")
  execute_process(COMMAND ${Micromamba_EXECUTABLE} create -p "${CMAKE_BINARY_DIR}/environment" ${CHANNEL_ARG} ${PARSED_ARGS_DEPENDENCIES} --yes)
endmacro()
