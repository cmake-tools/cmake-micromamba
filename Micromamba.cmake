set(MICROMAMBA_LATEST_VERSION "1.0.0" CACHE INTERNAL "Micromamba latest version")
set(Micromamba_DIR "${PROJECT_SOURCE_DIR}/cmake" CACHE INTERNAL "")

set(MICROMAMBA_1.0.0-1_WIN64_SHA256 "e8b02c5b51eecb71953a460846f37acd6066eb3cef6cd3aebc60835048f37ad3" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_1.0.0-1_OSX64_SHA256 "2141288a06b520c81724eb1fad2e99395133c7d64ca9c776ae8d6ccc7edfd8e0" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_1.0.0-1_OSXARM64_SHA256 "ffb87b3923a01f22d299d21f8da2b57b0a22bf1be4f59f634f449ffa431d7d18" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_1.0.0-1_PPC64LE_SHA256 "196831fad6384fc7520ae2bf2eddaae6b3a256d80f607efb5eb1d97d3cc0c4e0" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_1.0.0-1_AARCH64_SHA256 "57934f137d326aaaebfd9788ddd0e112135d33b95a7dd3e9292517ce025b4d5a" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_1.0.0-1_LINUX64_SHA256 "41bda425dd9c44b59cc35781c1b4031465c36648791e8598f7826f65ef09e387" CACHE INTERNAL "Micromamba SHA256")

set(MICROMAMBA_0.27.0-3_WIN64_SHA256 "76e86da3df0f21aab58e5b87ecf5159f4057b8955c448411de3b66547b4e6570" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.27.0-3_OSX64_SHA256 "323beff65157c05e078d6b02377afe30d7a032a0df264fbb973dd1135939a3c3" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.27.0-3_OSXARM64_SHA256 "4142bb858ad0a1e097f06eb7bf5c5d6e8ad14ab09620b66a306b43786d745f4f" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.27.0-3_PPC64LE_SHA256 "ebff97ee00603c6db408969b2404a7e741fca9ad8259ded22d0b4e4453f70375" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.27.0-3_AARCH64_SHA256 "49ef9a7302da84ef0de9cb9f181fb6080b658042c1edaea3817aa52472b10bb8" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.27.0-3_LINUX64_SHA256 "1bb0c8896927a64a6d73a33fa08a915c22c57b240db92e2d6595b6741f509ed0" CACHE INTERNAL "Micromamba SHA256")

set(MICROMAMBA_0.26.0_WIN64_SHA256 "862d1cc64fa097d705bafa0cf472b173159f940b40ef77537efca80aa162cab1" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.26.0_OSX64_SHA256 "08b52c26ce58c5c0cb94ed420333a09897c48855ed5ed781f50a2ef7801349d7" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.26.0_OSXARM64_SHA256 "4989c0a5c94d0917d7e1941036ea3adf3da287c4e8249ac680fc41134210ea60" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.26.0_PPC64LE_SHA256 "51f14e6dd24fb9068002da3ba7ca5193879c208676c55c4f3f2459ee222ca64a" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.26.0_AARCH64_SHA256 "1413aa95bacc0546b02d54bde8b38c161de571465ccca1107ca303c0cb26a958" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.26.0_LINUX64_SHA256 "404100d70109e1c264abae0a28c85b336e47dc2b82957642373794855a05e86c" CACHE INTERNAL "Micromamba SHA256")

set(MICROMAMBA_0.25.1_WIN64_SHA256 "ed3b12b747f05a630198d3a8a8f7120bde22ae9033cb62af95d6f3df57fe9b0c" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.1_OSX64_SHA256 "bd80ed9cb39748a40ae7dfd124aa18e453bf4793e281daf687710c81272e8be1" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.1_OSXARM64_SHA256 "b39fb2f9f2bed41c5ad885f41f49ba751a4ba5ee01ee96ca8293a84aa603d1b2" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.1_PPC64LE_SHA256 "0f5be296570c93317ff22af8b586cf07bd4a96c5e30b323b53fa0970755c2c31" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.1_AARCH64_SHA256 "069937fc13c42b3963f1bbe991ad921cdcd75f07771b9a6468c92b66d9b298f6" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.1_LINUX64_SHA256 "2d8ab91435ea75e4b76412795742b6a17ff25f6d7081a9411a1bc96688e1f7d1" CACHE INTERNAL "Micromamba SHA256")

set(MICROMAMBA_0.25.0_WIN64_SHA256 "8c2b679eeb9bf9d3a7a89f9753e72e96f8bde1734af24c687f51589b02009474" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.0_OSX64_SHA256 "8f9aef1988c08ed7d65d2d00c4115bea881c64adcade87e6ea26db9fa8eeff08" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.0_OSXARM64_SHA256 "aabfefc4c4902930c67cd50a0c09b368bb27d4c6f0bd293d5068a4a6a7243e13" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.0_PPC64LE_SHA256 "ce3329f4b9f9922d1f7bd0137edb0b80755f34d05d2c451726e14194d78609c8" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.0_AARCH64_SHA256 "20fc7fa2a6208482afe98494864725f3084cf7a9bd8a581dbf6aa5f1be14a70c" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.25.0_LINUX64_SHA256 "6bafd0ce6570269ae6ec9ae72a401cb21359b34f45b75b2a7a66499821e45322" CACHE INTERNAL "Micromamba SHA256")

set(MICROMAMBA_0.24.0_WIN64_SHA256 "eb53b068eb03065434faeeb7dfccc43a4174c34a1584065a05d70bec34bb10ac" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.24.0_OSX64_SHA256 "3ecf46f18c7f900c0acb7af89f097899161f0f37a8e16bedd8431d065a003902" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.24.0_OSXARM64_SHA256 "e1ceb65f08a700e019ef396b4c4ed6abd98999509269eb09c89128680b78d3cc" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.24.0_PPC64LE_SHA256 "536b358dc2cf52d910498e65338919376c8cd0fcc727b19ca862403fc9a578d1" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.24.0_AARCH64_SHA256 "8ef7056497ef93de885eb4e0d68a8aa348881fb9c09ce9e4d33b8e26bf4014a2" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.24.0_LINUX64_SHA256 "daaef648a0307a4d011dc888df9b02047a8cdf820fb9bcaddba20a29d99cdae9" CACHE INTERNAL "Micromamba SHA256")

set(MICROMAMBA_0.23.0_WIN64_SHA256 "063815c2b494112c09d82f8cf3911be2ec9b72f5e475ad56baec37e80288f019" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.23.0_OSX64_SHA256 "9d374e4693bc409f32c06a1c8a89506994d6cd74bfb8d499781c542b6ebda6e5" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.23.0_OSXARM64_SHA256 "d41de3796bea111e3eaa4e8904c4352003b5eaa7d61d97dc21bf917c70e35fd4" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.23.0_PPC64LE_SHA256 "2836d468c7ec96022043eda01d7f037ca23b4e0b29c4f68c9078be95acb857f2" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.23.0_AARCH64_SHA256 "d00828e00f4160103488b60c8a9378f23df62953e3d2647669bfc2ee9e6c6e13" CACHE INTERNAL "Micromamba SHA256")
set(MICROMAMBA_0.23.0_LINUX64_SHA256 "20f7049bd07087e0327c98bf4bde3243bb011a7d3be3ed4c18acb99152e246ab" CACHE INTERNAL "Micromamba SHA256")

include(CMakeParseArguments)

# Construct the URL micromamba binary
function(mamba_get_url URL SHA256)
  cmake_parse_arguments(MICROMAMBA "" "VERSION" "" "${ARGN}")

  if(NOT DEFINED MICROMAMBA_VERSION OR MICROMAMBA_VERSION STREQUAL "")
    set(MICROMAMBA_VERSION ${MICROMAMBA_LATEST_VERSION})
  endif()

  set(MICROMAMBA_URL "https://anaconda.org/conda-forge/micromamba/${MICROMAMBA_VERSION}/download")
  set(MICROMAMBA_FILE "micromamba-${MICROMAMBA_VERSION}-0.tar.bz2")

  if(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Darwin")
    if(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "arm")
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/osx-arm64/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_OSXARM64_SHA256}")
    else()
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/osx-64/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_OSX64_SHA256}")
    endif()
  elseif(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Windows")
    set(MICROMAMBA_URL "${MICROMAMBA_URL}/win-64/${MICROMAMBA_FILE}")
    set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_WIN64_SHA256}")
  elseif(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Linux")
    if(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "aarch64")
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/linux-aarch64/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_AARCH64_SHA256}")
    elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "ppc64le")
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/linux-ppc64le/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_PPC64LE_SHA256}")
    elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "64")
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/linux-64/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_LINUX64_SHA256}")
    endif()
  else()
    message(FATAL_ERROR "Micromamba is not available for your system \"${CMAKE_HOST_SYSTEM_NAME}\"")
  endif()
  set(URL "${MICROMAMBA_URL}" PARENT_SCOPE)
  set(SHA256 "${MICROMAMBA_SHA256}" PARENT_SCOPE)
  set(VERSION "${MICROMAMBA_VERSION}" PARENT_SCOPE)
endfunction()

# Download the micromamba binary
function(download_micromamba)
  cmake_parse_arguments(MICROMAMBA "SHOW_PROGRESS" "DESTINATION;VERSION;TIMEOUT;INACTIVITY_TIMEOUT" "" "${ARGN}")

  if(NOT DEFINED MICROMAMBA_DESTINATION OR DESTINATION STREQUAL "")
    set(MICROMAMBA_DESTINATION "${CMAKE_BINARY_DIR}/micromamba")
  endif()
  mamba_get_url(URL SHA256 VERSION ${MICROMAMBA_VERSION})

  file(DOWNLOAD "${URL}" "${MICROMAMBA_DESTINATION}/micromamba-${VERSION}.tar.bz2"
      LOG FILE_LOG
      STATUS FILE_STATUS
      EXPECTED_HASH SHA256=${SHA256})

  execute_process(COMMAND "${CMAKE_COMMAND}" -E tar "xzf" "${MICROMAMBA_DESTINATION}/micromamba-${VERSION}.tar.bz2"
                  WORKING_DIRECTORY "${MICROMAMBA_DESTINATION}")

  set(DESTINATION "${MICROMAMBA_DESTINATION}" PARENT_SCOPE)
endfunction()

# Call the micromamba download
function(micromamba)
  cmake_parse_arguments(MICROMAMBA "SHOW_PROGRESS" "DESTINATION;VERSION" "" "${ARGN}")

  set(CMAKE_MODULE_PATH "${Micromamba_DIR}")

  if(NOT DEFINED MICROMAMBA_DESTINATION OR DESTINATION STREQUAL "")
    set(MICROMAMBA_DESTINATION "${CMAKE_BINARY_DIR}/micromamba")
  endif()

  if(CMMM_STANDALONE)
    download_micromamba(DESTINATION ${MICROMAMBA_DESTINATION} VERSION ${MICROMAMBA_VERSION})
    set(MICROMAMBA_ROOT ${DESTINATION})
    find_package(Micromamba REQUIRED)
  elseif(CMMM_LOCAL_ONLY)
    find_package(Micromamba REQUIRED)
  else()
    find_package(Micromamba QUIET)
    if(NOT Micromamba_FOUND)
      message(STATUS "Installing micromamba version ${MICROMAMBA_VERSION} to ${MICROMAMBA_DESTINATION}")
      download_micromamba(DESTINATION ${MICROMAMBA_DESTINATION} VERSION ${MICROMAMBA_VERSION})
      set(MICROMAMBA_ROOT ${DESTINATION})
      find_package(Micromamba REQUIRED)
    endif()
  endif()
endfunction()

# Setup micromamba environment
macro(micromamba_environment)
  message("Installing dependencies from channels :")

  cmake_parse_arguments(PARSED_ARGS "" "" "CHANNELS;DEPENDENCIES" ${ARGN})

  micromamba()

  set(CHANNEL_ARG "")
  foreach(Channel ${PARSED_ARGS_CHANNELS})
    list(APPEND CHANNEL_ARG "-c")
    list(APPEND CHANNEL_ARG ${Channel})
  endforeach()

  if(${CMAKE_VERSION} VERSION_LESS 3.15)
    execute_process(COMMAND ${MICROMAMBA_EXECUTABLE} create -p "${CMAKE_BINARY_DIR}/environment" ${CHANNEL_ARG} ${PARSED_ARGS_DEPENDENCIES} --yes)
  else()
    execute_process(COMMAND ${MICROMAMBA_EXECUTABLE} create -p "${CMAKE_BINARY_DIR}/environment" ${CHANNEL_ARG} ${PARSED_ARGS_DEPENDENCIES} --yes COMMAND_ECHO STDOUT)
  endif()
  set(CMAKE_PREFIX_PATH "${CMAKE_BINARY_DIR}/environment;${CMAKE_PREFIX_PATH}")
endmacro()
