set(MICROMAMBA_LATEST_VERSION "0.24.0")

set(MICROMAMBA_0.24.0_OSXARM64_SHA256 "e1ceb65f08a700e019ef396b4c4ed6abd98999509269eb09c89128680b78d3cc")
set(MICROMAMBA_0.24.0_OSX64_SHA256 "3ecf46f18c7f900c0acb7af89f097899161f0f37a8e16bedd8431d065a003902")
set(MICROMAMBA_0.24.0_WIN64_SHA256 "eb53b068eb03065434faeeb7dfccc43a4174c34a1584065a05d70bec34bb10ac")
set(MICROMAMBA_0.24.0_AARCH64_SHA256 "8ef7056497ef93de885eb4e0d68a8aa348881fb9c09ce9e4d33b8e26bf4014a2")
set(MICROMAMBA_0.24.0_PPC64LE_SHA256 "536b358dc2cf52d910498e65338919376c8cd0fcc727b19ca862403fc9a578d1")
set(MICROMAMBA_0.24.0_LINUX64_SHA256 "daaef648a0307a4d011dc888df9b02047a8cdf820fb9bcaddba20a29d99cdae9")

set(MICROMAMBA_0.23.0_OSXARM64_SHA256 "d41de3796bea111e3eaa4e8904c4352003b5eaa7d61d97dc21bf917c70e35fd4")
set(MICROMAMBA_0.23.0_OSX64_SHA256 "9d374e4693bc409f32c06a1c8a89506994d6cd74bfb8d499781c542b6ebda6e5")
set(MICROMAMBA_0.23.0_WIN64_SHA256 "063815c2b494112c09d82f8cf3911be2ec9b72f5e475ad56baec37e80288f019")
set(MICROMAMBA_0.23.0_AARCH64_SHA256 "d00828e00f4160103488b60c8a9378f23df62953e3d2647669bfc2ee9e6c6e13")
set(MICROMAMBA_0.23.0_PPC64LE_SHA256 "2836d468c7ec96022043eda01d7f037ca23b4e0b29c4f68c9078be95acb857f2")
set(MICROMAMBA_0.23.0_LINUX64_SHA256 "20f7049bd07087e0327c98bf4bde3243bb011a7d3be3ed4c18acb99152e246ab")

function(mamba_get_url URL SHA256)
  cmake_parse_arguments(MICROMAMBA "" "VERSION" "" "${ARGN}")

  if(NOT DEFINED MICROMAMBA_VERSION OR MICROMAMBA_VERSION STREQUAL "")
    set(MICROMAMBA_VERSION ${MICROMAMBA_LATEST_VERSION})
  endif()

  set(MICROMAMBA_URL "https://anaconda.org/conda-forge/micromamba/${MICROMAMBA_VERSION}/download")
  set(MICROMAMBA_FILE "micromamba-${MICROMAMBA_VERSION}-0.tar.bz2")

  if(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Darwin")
    if(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "arm")
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/osx-arm64/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_OSXARM64_SHA256}")
    else()
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/osx-64/${MICROMAMBA_FILE}")
        set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_OSX64_SHA256}")
    endif()
  elseif(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Windows")
    set(MICROMAMBA_URL "${MICROMAMBA_URL}/win-64/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_WIN64_SHA256}")
  elseif(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Linux")
    if(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "aarch64")
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/linux-aarch64/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_AARCH64_SHA256}")
    elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "ppc64le")
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/linux-ppc64le/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_PPC64LE_SHA256}")
    elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "64")
      set(MICROMAMBA_URL "${MICROMAMBA_URL}/linux-64/${MICROMAMBA_FILE}")
      set(MICROMAMBA_SHA256 "${MICROMAMBA_${MICROMAMBA_VERSION}_LINUX64_SHA256}")
    endif()
  else()
    message(FATAL_ERROR "Micromamba is not available for your system \"${CMAKE_HOST_SYSTEM_NAME}\"")
  endif()
  set(URL "${MICROMAMBA_URL}" PARENT_SCOPE)
  set(SHA256 "${MICROMAMBA_SHA256}" PARENT_SCOPE)
  set(VERSION "${MICROMAMBA_VERSION}" PARENT_SCOPE)
endfunction()

function(download_micromamba)
  cmake_parse_arguments(MICROMAMBA "SHOW_PROGRESS" "DESTINATION;VERSION;TIMEOUT;INACTIVITY_TIMEOUT" "" "${ARGN}")

  if(NOT DEFINED MICROMAMBA_DESTINATION OR DESTINATION STREQUAL "")
    set(MICROMAMBA_DESTINATION "${CMAKE_BINARY_DIR}/micromamba")
  endif()
  mamba_get_url(URL SHA256 VERSION ${MICROMAMBA_VERSION})

  file(DOWNLOAD "${URL}" "${MICROMAMBA_DESTINATION}/micromamba-${VERSION}.tar.bz2"
       LOG FILE_LOG
       STATUS FILE_STATUS
       EXPECTED_HASH SHA256=${SHA256})

  file(ARCHIVE_EXTRACT INPUT "${MICROMAMBA_DESTINATION}/micromamba-${VERSION}.tar.bz2"
       DESTINATION "${MICROMAMBA_DESTINATION}")

  set(DESTINATION "${MICROMAMBA_DESTINATION}" PARENT_SCOPE)
endfunction()

function(micromamba)
  cmake_parse_arguments(MICROMAMBA "SHOW_PROGRESS" "DESTINATION;VERSION" "" "${ARGN}")

  if(NOT DEFINED MICROMAMBA_DESTINATION OR DESTINATION STREQUAL "")
    set(MICROMAMBA_DESTINATION "${CMAKE_BINARY_DIR}/micromamba")
  endif()

  if(CMMM_STANDALONE)
    download_micromamba(DESTINATION ${MICROMAMBA_DESTINATION} VERSION ${MICROMAMBA_VERSION})
    set(MICROMAMBA_ROOT ${DESTINATION})
    find_package(Micromamba REQUIRED)
  elseif(CMMM_LOCAL_ONLY)
    find_package(Micromamba REQUIRED)
  else()
    find_package(Micromamba QUIET)
    if(NOT Micromamba_FOUND)
      message(STATUS "Installing it to ${MICROMAMBA_DESTINATION}")
      download_micromamba(DESTINATION ${MICROMAMBA_DESTINATION} VERSION ${MICROMAMBA_VERSION})
      set(MICROMAMBA_ROOT ${DESTINATION})
      find_package(Micromamba REQUIRED)
    endif()
  endif()
endfunction()

macro(micromamba_environment)
  message("Installing dependencies from channels:")

  cmake_parse_arguments(PARSED_ARGS "" "" "CHANNELS;DEPENDENCIES" ${ARGN})

  micromamba()

  set(CHANNEL_ARG "")
  foreach(C ${PARSED_ARGS_CHANNELS})
    list(APPEND CHANNEL_ARG "-c")
    list(APPEND CHANNEL_ARG ${C})
  endforeach()

  execute_process(COMMAND ${MICROMAMBA_EXECUTABLE} create -p "${CMAKE_BINARY_DIR}/environment" ${CHANNEL_ARG} ${PARSED_ARGS_DEPENDENCIES} --yes COMMAND_ECHO STDOUT)
  set(CMAKE_PREFIX_PATH "${CMAKE_BINARY_DIR}/environment;${CMAKE_PREFIX_PATH}")
endmacro()
